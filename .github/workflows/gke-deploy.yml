name: 構建並部署到 GKE

on:
  push:
    branches: [develop , "Set/GKE"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["develop"]

permissions:
  contents: read
  packages: write
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  REGISTRY_URL: asia-east1-docker.pkg.dev 
  GCP_PROJECT_NUMBER: '1061852642455' 
  REPOSITORY_NAME: deno-web-app
  IMAGE_NAME: deno-web-app
  DEPLOYMENT_NAME: deno-web-app

jobs:
  build:
    name: 構建並推送 Docker 映像
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image-tag.outputs.tag }}

    steps:
      - name: 設置倉庫變數
        run: |
          echo "設置倉庫名稱為: ${{ env.REPOSITORY_NAME }}"

      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Helm
        uses: Azure/setup-helm@v4.3.1

      - name: 設置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - id: 'auth'
        name: '使用 WIF 驗證到 GCP'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'

      - name: 登入 Artifact Registry
        run: |-
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${{ env.REGISTRY_URL }}

      - name: 設置映像標籤
        id: image-tag
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]')
            echo "tag=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${TAG_NAME}" >> $GITHUB_OUTPUT
          else
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            BRANCH=$(echo ${{ github.ref_name }} | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
            echo "tag=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${BRANCH}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi
          echo "使用的映像標籤: $(cat $GITHUB_OUTPUT | grep tag= | cut -d= -f2)"

      - name: 提取 Docker 元數據
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},event=tag
            type=semver,pattern={{major}}.{{minor}},event=tag
            type=sha,format=short

      - name: 構建並推送 Docker 映像
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name!= 'pull_request' }}
          tags: ${{ steps.image-tag.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: 部署到 GKE 叢集
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name!= 'pull_request'

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Helm
        uses: Azure/setup-helm@v4.3.1

      - id: 'auth'
        name: '使用 WIF 驗證到 GCP'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'
          
      - name: 設置 GKE 認證
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ env.PROJECT_ID }}

      - name: 創建命名空間
        run: |
          kubectl create namespace ${{ env.DEPLOYMENT_NAME }} --dry-run=client -o yaml | kubectl apply -f -

      - name: 創建 Docker Registry Secret
        run: |
          kubectl create secret docker-registry ghcr-auth \
            --namespace ${{ env.DEPLOYMENT_NAME }} \
            --docker-server=${{ env.REGISTRY_URL }} \
            --docker-username=oauth2accesstoken \
            --docker-password=$(gcloud auth print-access-token) \
            --dry-run=client -o yaml | kubectl apply -f -
  
      - name: 檢查並清理 Helm 狀態
        run: |
          echo "檢查 Helm release 狀態..."
          
          # 檢查是否存在卡住的 release
          if helm list -n ${{ env.DEPLOYMENT_NAME }} --deployed --failed --pending | grep ${{ env.DEPLOYMENT_NAME }}; then
            echo "發現現有的 release，檢查狀態..."
            helm status ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }} || echo "無法獲取狀態"
            
            # 如果有卡住的操作，進行清理
            echo "檢查是否有卡住的操作..."
            if helm list -n ${{ env.DEPLOYMENT_NAME }} --pending | grep ${{ env.DEPLOYMENT_NAME }}; then
              echo "⚠️  發現卡住的操作，正在清理..."
              helm rollback ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }} || echo "回滾失敗，嘗試強制操作"
            fi
          else
            echo "✅ 沒有現有的 release"
          fi

      - name: 部署 Helm Chart
        run: |
          echo "開始部署 Helm Chart..."
          echo "映像標籤: $(echo "${{ needs.build.outputs.image_tag }}" | cut -d: -f2-)"
          
          # 使用 --force 參數處理可能的衝突
          helm upgrade --install ${{ env.DEPLOYMENT_NAME }} ./Helm \
            --namespace ${{ env.DEPLOYMENT_NAME }} \
            --set image.repository=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }} \
            --set image.tag=$(echo "${{ needs.build.outputs.image_tag }}" | cut -d: -f2-) \
            --set imagePullSecrets[0].name=ghcr-auth \
            --create-namespace \
            --wait --timeout=8m \
            --force \
            --debug

      - name: 驗證部署狀態
        run: |
          echo "驗證部署狀態..."
          kubectl get pods -n ${{ env.DEPLOYMENT_NAME }}
          kubectl get services -n ${{ env.DEPLOYMENT_NAME }}
          kubectl get ingress -n ${{ env.DEPLOYMENT_NAME }} || echo "無 Ingress 資源"
          
          # 檢查 Pod 就緒狀態
          echo "等待 Pod 就緒..."
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=deno-web-app \
            -n ${{ env.DEPLOYMENT_NAME }} --timeout=300s || echo "某些 Pod 可能還未就緒"
          
          echo "✅ 部署完成"

      - name: 故障排除資訊
        if: failure()
        run: |
          echo "🚨 部署失敗，收集診斷資訊..."
          
          echo "=== Helm Release 狀態 ==="
          helm list -n ${{ env.DEPLOYMENT_NAME }} -a || echo "無法獲取 Helm release 列表"
          helm status ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }} || echo "無法獲取 release 狀態"
          
          echo "=== Kubernetes 事件 ==="
          kubectl get events -n ${{ env.DEPLOYMENT_NAME }} --sort-by='.lastTimestamp' --field-selector type!=Normal || echo "無法獲取事件"
          
          echo "=== Pod 詳細資訊 ==="
          kubectl describe pods -n ${{ env.DEPLOYMENT_NAME }} || echo "無法獲取 Pod 描述"
          
          echo "=== Pod 日誌 ==="
          for pod in $(kubectl get pods -n ${{ env.DEPLOYMENT_NAME }} -o name); do
            echo "--- $pod 日誌 ---"
            kubectl logs $pod -n ${{ env.DEPLOYMENT_NAME }} --tail=50 || echo "無法獲取日誌"
          done