name: 構建並部署到 GKE

on:
  push:
    branches: [develop , "Add/Grafana"]
    tags: ["v*.*.*"]

permissions:
  contents: read
  packages: write
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  REGISTRY_URL: asia-east1-docker.pkg.dev 
  GCP_PROJECT_NUMBER: '1061852642455' 
  REPOSITORY_NAME: deno-web-app
  IMAGE_NAME: deno-web-app
  DEPLOYMENT_NAME: deno-web-app

jobs:
  build:
    name: 構建並推送 Docker 映像
    runs-on: ubuntu-latest

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - id: 'auth'
        name: '使用 WIF 驗證到 GCP'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'

      - name: 登入 Artifact Registry
        run: |-
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${{ env.REGISTRY_URL }}

      - name: 設置映像標籤
        id: image-tag
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]')
            echo "tag=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${TAG_NAME}" >> $GITHUB_OUTPUT
          else
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            BRANCH=$(echo ${{ github.ref_name }} | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
            echo "tag=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${BRANCH}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: 提取 Docker 元數據
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},event=tag
            type=semver,pattern={{major}}.{{minor}},event=tag
            type=sha,format=short

      - name: 構建並推送 Docker 映像
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name!= 'pull_request' }}
          tags: ${{ steps.image-tag.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: 部署到 GKE 叢集
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name!= 'pull_request'

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - id: 'auth'
        name: '使用 WIF 驗證到 GCP'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'

      - name: 設置 GKE 認證
        uses: google-github-actions/get-gke-credentials@v3
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ env.PROJECT_ID }}

      - name: 創建命名空間
        run: |
          kubectl create namespace ${{ env.DEPLOYMENT_NAME }} --dry-run=client -o yaml | kubectl apply -f -

      - name: 創建 Docker Registry Secret
        run: |
          kubectl create secret docker-registry ghcr-auth \
            --namespace ${{ env.DEPLOYMENT_NAME }} \
            --docker-server=${{ env.REGISTRY_URL }} \
            --docker-username=oauth2accesstoken \
            --docker-password=$(gcloud auth print-access-token) \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: 準備映像標籤
        id: prepare-tag
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]')
            IMAGE_TAG="${TAG_NAME}"
          else
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            BRANCH=$(echo ${{ github.ref_name }} | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
            IMAGE_TAG="${BRANCH}-${SHORT_SHA}"
          fi
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "full_image=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 處理現有 Deployment
        run: |
          if kubectl get deployment deno-web-app -n ${{ env.DEPLOYMENT_NAME }} >/dev/null 2>&1; then
            HELM_LABELS=$(kubectl get deployment deno-web-app -n ${{ env.DEPLOYMENT_NAME }} -o jsonpath='{.spec.selector.matchLabels}' | grep -o 'app\.kubernetes\.io' || echo "")
            if [[ -n "${HELM_LABELS}" ]]; then
              kubectl delete deployment deno-web-app -n ${{ env.DEPLOYMENT_NAME }}
              kubectl wait --for=delete pods -l "app.kubernetes.io/name=deno-web-app" -n ${{ env.DEPLOYMENT_NAME }} --timeout=120s || true
            fi
          fi

      - name: 處理現有 MySQL Deployment
        run: |
          if kubectl get deployment mysql -n ${{ env.DEPLOYMENT_NAME }} >/dev/null 2>&1; then
            echo "發現現有的 MySQL deployment，檢查是否需要更新..."
            kubectl rollout status deployment/mysql -n ${{ env.DEPLOYMENT_NAME }} --timeout=60s || true
          fi

      - name: 部署 MySQL 到 GKE
        run: |
          echo "部署 MySQL 資料庫..."
          kubectl apply -f kubernetes/mysql.yaml

      - name: 處理現有 Grafana Deployment
        run: |
          if kubectl get deployment grafana -n ${{ env.DEPLOYMENT_NAME }} >/dev/null 2>&1; then
            echo "發現現有的 Grafana deployment，檢查是否需要更新..."
            kubectl rollout status deployment/grafana -n ${{ env.DEPLOYMENT_NAME }} --timeout=60s || true
          fi

      - name: 部署 Prometheus 到 GKE
        run: |
          echo "部署 Prometheus 監控..."
          kubectl apply -f kubernetes/prometheus.yaml

      - name: 部署 Loki 到 GKE
        run: |
          echo "部署 Loki 日誌聚合..."
          kubectl apply -f kubernetes/loki.yaml

      - name: 部署 Tempo 到 GKE
        run: |
          echo "部署 Tempo 分佈式追蹤..."
          kubectl apply -f kubernetes/tempo.yaml

      - name: 部署 Grafana 到 GKE
        run: |
          echo "部署 Grafana ..."
          kubectl apply -f kubernetes/grafana.yml
      
      - name: 部署應用程式到 GKE
        run: |
          echo "部署 deno-web-app 應用程式..."
          FULL_IMAGE_PATH="${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${{ steps.prepare-tag.outputs.tag }}"
          sed "s|asia-east1-docker.pkg.dev/PROJECT_ID/deno-web-app/deno-web-app:latest|$FULL_IMAGE_PATH|g" kubernetes/deno.yaml > deployment-temp.yaml
          sed -i "s/PROJECT_ID/${{ env.PROJECT_ID }}/g" deployment-temp.yaml
          kubectl apply -f deployment-temp.yaml
          kubectl rollout status deployment/deno-web-app -n ${{ env.DEPLOYMENT_NAME }} --timeout=600s
          rm -f deployment-temp.yaml
          echo "應用程式部署完成！"
