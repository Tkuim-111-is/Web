name: 構建並部署到 GKE

on:
  push:
    branches: [develop , "Set/GKE"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["develop"]

permissions:
  contents: read
  packages: write
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  REGISTRY_URL: asia-east1-docker.pkg.dev 
  GCP_PROJECT_NUMBER: '1061852642455' 
  REPOSITORY_NAME: deno-web-app
  IMAGE_NAME: deno-web-app
  DEPLOYMENT_NAME: deno-web-app

jobs:
  build:
    name: 構建並推送 Docker 映像
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image-tag.outputs.tag }}

    steps:
      - name: 設置倉庫變數
        run: |
          echo "設置倉庫名稱為: ${{ env.REPOSITORY_NAME }}"

      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Helm
        uses: Azure/setup-helm@v4.3.1

      - name: 設置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      # 使用 Workload Identity Federation (WIF) 驗證
      - id: 'auth'
        name: '使用 WIF 驗證到 GCP'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'

      - name: 創建 Artifact Registry 倉庫
        run: |
          gcloud artifacts repositories create ${{ env.REPOSITORY_NAME }} \
            --repository-format=docker \
            --location=asia-east1 \
            --project=${{ env.PROJECT_ID }} || echo "倉庫可能已存在"
          
          echo "設置服務帳戶權限..."
          gcloud projects add-iam-policy-binding ${{ env.PROJECT_ID }} \
            --member="serviceAccount:github-actions-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
            --role="roles/artifactregistry.writer" || echo "權限可能已設置"

      - name: 登入 Artifact Registry
        run: |-
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${{ env.REGISTRY_URL }}

      - name: 設置映像標籤
        id: image-tag
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]')
            echo "tag=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${TAG_NAME}" >> $GITHUB_OUTPUT
          else
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            BRANCH=$(echo ${{ github.ref_name }} | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
            echo "tag=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${BRANCH}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi
          echo "使用的映像標籤: $(cat $GITHUB_OUTPUT | grep tag= | cut -d= -f2)"

      - name: 提取 Docker 元數據
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},event=tag
            type=semver,pattern={{major}}.{{minor}},event=tag
            type=sha,format=short

      - name: 構建並推送 Docker 映像
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name!= 'pull_request' }}
          tags: ${{ steps.image-tag.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 驗證映像是否已推送
        if: github.event_name!= 'pull_request'
        run: |
          echo "檢查映像是否已成功推送: ${{ steps.image-tag.outputs.tag }}"
          # 使用 GCP 令牌獲取映像清單
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${{ env.REGISTRY_URL }}
          docker pull ${{ steps.image-tag.outputs.tag }} || echo "映像可能已推送但無法驗證"

  deploy:
    name: 部署到 GKE 叢集
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name!= 'pull_request'

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Helm
        uses: Azure/setup-helm@v4.3.1

      - id: 'auth'
        name: '使用 WIF 驗證到 GCP'
        uses: 'google-github-actions/auth@v3'
        with:
          workload_identity_provider: 'projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'

      - name: 設置 GKE 認證
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ env.PROJECT_ID }}

      - name: 創建命名空間
        run: |
          kubectl create namespace ${{ env.DEPLOYMENT_NAME }} --dry-run=client -o yaml | kubectl apply -f -

      - name: 創建 Docker Registry Secret
        run: |
          kubectl create secret docker-registry ghcr-auth \
            --namespace ${{ env.DEPLOYMENT_NAME }} \
            --docker-server=${{ env.REGISTRY_URL }} \
            --docker-username=oauth2accesstoken \
            --docker-password=$(gcloud auth print-access-token) \
            --dry-run=client -o yaml | kubectl apply -f -
  
      - name: 部署 Helm Chart
        run: |
          helm upgrade --install ${{ env.DEPLOYMENT_NAME }} ./Helm \
            --namespace ${{ env.DEPLOYMENT_NAME }} \
            --set image.repository=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }} \
            --set image.tag=$(echo "${{ needs.build.outputs.image_tag }}" | cut -d: -f2-) \
            --set imagePullSecrets[0].name=ghcr-auth \
            --wait --timeout=10m

      - name: 檢查部署狀態
        run: |
          kubectl get pods -n ${{ env.DEPLOYMENT_NAME }}
          kubectl get deployment -n ${{ env.DEPLOYMENT_NAME }}
          kubectl get services -n ${{ env.DEPLOYMENT_NAME }}