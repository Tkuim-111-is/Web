name: 構建並部署到 GKE

on:
  push:
    branches: ["develop", "release","Add/Docker"]
    tags: ["v*.*.*"]

permissions:
  contents: read
  packages: write

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DEPLOYMENT_NAME: deno-web-app

jobs:
  build:
    name: 構建並推送 Docker 映像
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image-tag.outputs.tag }}

    steps:
      - name: downcase IMAGE_NAME
        run: |
          echo "IMAGE_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登入容器註冊表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 設置映像標籤
        id: image-tag
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            BRANCH=$(echo ${{ github.ref_name }} | sed 's/\//-/g')
            echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BRANCH}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: 構建並推送 Docker 映像
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.image-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: 部署到 GKE
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 驗證 Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ env.PROJECT_ID }}

      - name: 設置 gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: 設置 Kubernetes 工具
        uses: azure/setup-kubectl@v3

      - name: 設置 Kustomize
        uses: imranismail/setup-kustomize@v2

      - name: 獲取 GKE 憑證
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --zone ${{ env.GKE_ZONE }} \
            --project ${{ env.PROJECT_ID }}

      - name: 準備 Kubernetes 配置
        run: |
          cd k8s
          
          # 替換映像標籤
          IMAGE_TAG="${{ needs.build.outputs.image_tag }}"
          sed -i "s|image: \${IMAGE_NAME}:\${IMAGE_TAG}|image: $IMAGE_TAG|g" deployment.yaml
          
          # 顯示替換後的部署文件
          echo "替換後的 deployment.yaml 內容："
          cat deployment.yaml
          
          # 創建命名空間（如果不存在）
          kubectl create namespace deno-web --dry-run=client -o yaml | kubectl apply -f -
          
          # 創建用於拉取 GitHub 容器的 Secret
          kubectl create secret docker-registry ghcr-auth \
            --namespace=deno-web \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --docker-email=${{ github.actor }}@users.noreply.github.com \
            --dry-run=client -o yaml | kubectl apply -f -
            
          # 修改 deployment.yaml 添加 imagePullSecrets
          sed -i '/imagePullPolicy: Always/a\        imagePullSecrets:\n        - name: ghcr-auth' deployment.yaml
          
          echo "添加 imagePullSecrets 後的 deployment.yaml："
          cat deployment.yaml

      - name: 部署到 GKE
        run: |
          cd k8s
          kustomize build . | kubectl apply -f -
          
          # 檢查映像拉取狀態
          echo "檢查 Pod 狀態..."
          kubectl get pods -n deno-web -o wide
          
          # 檢查 Pod 事件
          echo "檢查 Pod 事件..."
          kubectl get events -n deno-web --sort-by='.lastTimestamp'
          
          # 嘗試獲取部署狀態，增加超時時間
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n deno-web --timeout=600s

      - name: 驗證部署
        if: success() || failure()  # 即使前一步驟失敗也執行
        run: |
          echo "檢查部署資源狀態..."
          kubectl get deployments,pods,services,ingress -n deno-web -o wide
          
          # 檢查 Pod 日誌
          echo "檢查 Pod 日誌..."
          PODS=$(kubectl get pods -n deno-web -l app=deno-web-app -o jsonpath='{.items[*].metadata.name}')
          for POD in $PODS; do
            echo "Pod $POD 的日誌:"
            kubectl logs -n deno-web $POD --tail=50 || echo "無法獲取日誌"
          done
          
          echo "部署完成！應用已成功部署到 GKE。"
