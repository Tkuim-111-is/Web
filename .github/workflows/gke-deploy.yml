name: 構建並部署到 GKE

on:
  push:
    branches: [develop , "Set/GKE"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["develop"]

permissions:
  contents: read
  packages: write
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  REGISTRY_URL: asia-east1-docker.pkg.dev 
  GCP_PROJECT_NUMBER: '1061852642455' 
  REPOSITORY_NAME: deno-web-app
  IMAGE_NAME: deno-web-app
  DEPLOYMENT_NAME: deno-web-app

jobs:
  build:
    name: 構建並推送 Docker 映像
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image-tag.outputs.tag }}

    steps:
      - name: 設置倉庫變數
        run: |
          echo "設置倉庫名稱為: ${{ env.REPOSITORY_NAME }}"

      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Helm
        uses: Azure/setup-helm@v4.3.1

      - name: 設置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - id: 'auth'
        name: '使用 WIF 驗證到 GCP'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'

      - name: 登入 Artifact Registry
        run: |-
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${{ env.REGISTRY_URL }}

      - name: 設置映像標籤
        id: image-tag
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG_NAME=$(echo "${{ github.ref_name }}" | tr '[:upper:]' '[:lower:]')
            echo "tag=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${TAG_NAME}" >> $GITHUB_OUTPUT
          else
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            BRANCH=$(echo ${{ github.ref_name }} | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
            echo "tag=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:${BRANCH}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi
          echo "使用的映像標籤: $(cat $GITHUB_OUTPUT | grep tag= | cut -d= -f2)"

      - name: 提取 Docker 元數據
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},event=tag
            type=semver,pattern={{major}}.{{minor}},event=tag
            type=sha,format=short

      - name: 構建並推送 Docker 映像
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name!= 'pull_request' }}
          tags: ${{ steps.image-tag.outputs.tag }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: 部署到 GKE 叢集
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name!= 'pull_request'

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Helm
        uses: Azure/setup-helm@v4.3.1

      - id: 'auth'
        name: '使用 WIF 驗證到 GCP'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider'
          service_account: 'github-actions-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'

      - name: 設置 GKE 認證
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          project_id: ${{ env.PROJECT_ID }}

      - name: 創建命名空間
        run: |
          kubectl create namespace ${{ env.DEPLOYMENT_NAME }} --dry-run=client -o yaml | kubectl apply -f -

      - name: 創建 Docker Registry Secret
        run: |
          kubectl create secret docker-registry ghcr-auth \
            --namespace ${{ env.DEPLOYMENT_NAME }} \
            --docker-server=${{ env.REGISTRY_URL }} \
            --docker-username=oauth2accesstoken \
            --docker-password=$(gcloud auth print-access-token) \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: 確認並設置 Secret Manager
        run: |
          echo "🔍 檢查 GKE 叢集的 Secret Manager 外掛程式狀態..."
          
          # 檢查 Secret Manager 外掛程式是否已啟用
          SECRET_MANAGER_ENABLED=$(gcloud container clusters describe ${{ env.GKE_CLUSTER }} \
            --location=${{ env.GKE_ZONE }} \
            --project=${{ env.PROJECT_ID }} \
            --format="value(addonsConfig.secretManagerConfig.enabled)" || echo "false")
          
          if [ "$SECRET_MANAGER_ENABLED" = "true" ] || [ "$SECRET_MANAGER_ENABLED" = "True" ]; then
            echo "✅ Secret Manager 外掛程式已啟用"
          else
            echo "❌ Secret Manager 外掛程式未啟用，正在啟用..."
            gcloud container clusters update ${{ env.GKE_CLUSTER }} \
              --location=${{ env.GKE_ZONE }} \
              --project=${{ env.PROJECT_ID }} \
              --enable-secret-manager
            echo "✅ Secret Manager 外掛程式已啟用"
          fi
          
          # 驗證並創建必要的 secrets
          echo "🔍 檢查並創建 Secret Manager 中的 secrets..."
          SECRETS_TO_CHECK=("JWT_SECRET" "DB_PASS" "DB_USER")
          
          # 生成隨機值的函數
          generate_random_secret() {
            openssl rand -base64 32 | tr -d "=+/" | cut -c1-32
          }
          
          for secret_name in "${SECRETS_TO_CHECK[@]}"; do
            if gcloud secrets describe "$secret_name" --project=${{ env.PROJECT_ID }} >/dev/null 2>&1; then
              echo "✅ Secret '$secret_name' 已存在於 Secret Manager"
            else
              echo "🆕 Secret '$secret_name' 不存在，正在創建..."
              
              # 創建 secret
              gcloud secrets create "$secret_name" \
                --project=${{ env.PROJECT_ID }} \
                --replication-policy="automatic"
              
              # 生成並設置值
              SECRET_VALUE=""
              case "$secret_name" in
                "JWT_SECRET")
                  SECRET_VALUE=$(generate_random_secret)
                  ;;
                "DB_USER")
                  SECRET_VALUE="deno_user"
                  ;;
                "DB_PASS")
                  SECRET_VALUE=$(generate_random_secret)
                  ;;
              esac
              
              echo "$SECRET_VALUE" | gcloud secrets versions add "$secret_name" \
                --project=${{ env.PROJECT_ID }} \
                --data-file=-
              
              echo "✅ Secret '$secret_name' 已創建並設置值"
            fi
          done
          
          echo "🎉 所有必要的 secrets 都已就緒！"

      - name: 設定 Workload Identity 權限
        run: |
          echo "🔐 設定 Workload Identity 權限..."
          
          # 為每個 secret 設定 IAM 權限
          KSA_NAME="${{ env.DEPLOYMENT_NAME }}"
          NAMESPACE="${{ env.DEPLOYMENT_NAME }}"
          
          SECRETS_TO_BIND=("JWT_SECRET" "DB_PASS" "DB_USER")
          
          for secret_name in "${SECRETS_TO_BIND[@]}"; do
            echo "設定 Secret '$secret_name' 的 IAM 權限..."
            gcloud secrets add-iam-policy-binding "$secret_name" \
              --role=roles/secretmanager.secretAccessor \
              --member="principal://iam.googleapis.com/projects/${{ env.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ env.PROJECT_ID }}.svc.id.goog/subject/ns/${NAMESPACE}/sa/${KSA_NAME}" \
              --project=${{ env.PROJECT_ID }}
          done
          
          echo "✅ Workload Identity 權限設定完成"

      - name: 強制清理 Helm 狀態
        run: |
          echo "檢查並強制清理 Helm release 狀態..."
          
          # 檢查現有的 release
          if helm list -n ${{ env.DEPLOYMENT_NAME }} -a | grep ${{ env.DEPLOYMENT_NAME }}; then
            echo "發現現有的 release，檢查狀態..."
            helm status ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }} || echo "無法獲取狀態"
            
            # 強制刪除卡住的 release
            echo "🗑️  強制刪除現有的 release..."
            helm uninstall ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }} --timeout=120s || echo "卸載失敗，繼續進行"
            
            # 清理相關 Kubernetes 資源
            echo "🧹 清理相關 Kubernetes 資源..."
            kubectl delete deployment ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }} --ignore-not-found=true
            kubectl delete service ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }} --ignore-not-found=true
            kubectl delete ingress ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }} --ignore-not-found=true
            kubectl delete configmap ${{ env.DEPLOYMENT_NAME }}-config -n ${{ env.DEPLOYMENT_NAME }} --ignore-not-found=true
            
            # 等待資源清理完成
            echo "⏳ 等待資源清理完成..."
            sleep 10
          else
            echo "✅ 沒有現有的 release"
          fi

      - name: 準備映像標籤
        id: prepare-tag
        run: |
          echo "檢查映像標籤..."
          
          # 檢查是否有 build job 的輸出
          if [[ -n "${{ needs.build.outputs.image_tag }}" ]]; then
            IMAGE_TAG=$(echo "${{ needs.build.outputs.image_tag }}" | cut -d: -f2-)
            echo "使用 build job 的映像標籤: $IMAGE_TAG"
          else
            # 生成默認標籤
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
            BRANCH=$(echo ${{ github.ref_name }} | sed 's/\//-/g' | tr '[:upper:]' '[:lower:]')
            IMAGE_TAG="${BRANCH}-${SHORT_SHA}"
            echo "⚠️  build job 輸出為空，使用生成的標籤: $IMAGE_TAG"
          fi
          
          # 設置輸出
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "full_image=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # 驗證映像是否存在
          echo "驗證映像是否存在..."
          if docker manifest inspect ${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG >/dev/null 2>&1; then
            echo "✅ 映像已確認存在"
          else
            echo "❌ 警告: 映像可能不存在，部署可能會失敗"
            echo "映像路徑: ${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
          fi

      - name: 部署 Helm Chart
        run: |
          echo "開始部署 Helm Chart..."
          echo "使用映像: ${{ steps.prepare-tag.outputs.full_image }}"
          echo "映像標籤: ${{ steps.prepare-tag.outputs.tag }}"
          
          # 使用準備好的映像標籤進行部署 (Secret Manager 外掛程式)
          helm upgrade --install ${{ env.DEPLOYMENT_NAME }} ./Helm \
            --namespace ${{ env.DEPLOYMENT_NAME }} \
            --set image.repository=${{ env.REGISTRY_URL }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ steps.prepare-tag.outputs.tag }} \
            --set imagePullSecrets[0].name=ghcr-auth \
            --set gcp.projectId=${{ env.PROJECT_ID }} \
            --create-namespace \
            --wait --timeout=10m \
            --atomic \
            --debug

      - name: 驗證關鍵資源
        run: |
          echo "📋 驗證部署的關鍵資源..."
          
          echo "=== ServiceAccount 狀態 ==="
          if kubectl get serviceaccount ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }} >/dev/null 2>&1; then
            echo "✅ ServiceAccount 已創建"
            kubectl get serviceaccount ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }}
          else
            echo "❌ ServiceAccount 不存在，這會導致 Pod 無法啟動"
            echo "列出所有 ServiceAccount："
            kubectl get serviceaccount -n ${{ env.DEPLOYMENT_NAME }}
          fi
          
          echo "=== ConfigMap 狀態 ==="
          kubectl get configmap -n ${{ env.DEPLOYMENT_NAME }} || echo "無 ConfigMap"
          
          echo "=== Secret 狀態 ==="
          kubectl get secret -n ${{ env.DEPLOYMENT_NAME }}
          
          echo "=== 檢查應用 Secret 是否存在 ==="
          if kubectl get secret ${{ env.DEPLOYMENT_NAME }}-app-secret -n ${{ env.DEPLOYMENT_NAME }} >/dev/null 2>&1; then
            echo "✅ 應用 Secret 存在"
            kubectl describe secret ${{ env.DEPLOYMENT_NAME }}-app-secret -n ${{ env.DEPLOYMENT_NAME }}
          else
            echo "❌ 應用 Secret 不存在 - 這會導致環境變數無法載入"
          fi
          
          echo "=== 立即檢查 Pod 創建 ==="
          sleep 5
          kubectl get pods -n ${{ env.DEPLOYMENT_NAME }} -o wide
          
          # 如果沒有 Pod，檢查 ReplicaSet
          POD_COUNT=$(kubectl get pods -n ${{ env.DEPLOYMENT_NAME }} --no-headers | wc -l)
          if [[ $POD_COUNT -eq 0 ]]; then
            echo "⚠️  沒有 Pod 被創建，檢查 ReplicaSet..."
            kubectl get replicaset -n ${{ env.DEPLOYMENT_NAME }}
            kubectl describe replicaset -n ${{ env.DEPLOYMENT_NAME }}
          fi

      - name: 診斷 Pod 啟動問題
        run: |
          echo "🔍 診斷 Pod 為什麼無法啟動..."
          
          echo "=== Deployment 狀態 ==="
          kubectl get deployment ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }} -o wide
          kubectl describe deployment ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }}
          
          echo "=== ReplicaSet 狀態 ==="
          kubectl get replicaset -n ${{ env.DEPLOYMENT_NAME }}
          kubectl describe replicaset -n ${{ env.DEPLOYMENT_NAME }}
          
          echo "=== Pod 狀態和詳細資訊 ==="
          kubectl get pods -n ${{ env.DEPLOYMENT_NAME }} -o wide
          
          # 獲取所有 Pod 並逐一診斷
          PODS=$(kubectl get pods -n ${{ env.DEPLOYMENT_NAME }} -o jsonpath='{.items[*].metadata.name}')
          for pod in $PODS; do
            echo "--- 診斷 Pod: $pod ---"
            kubectl describe pod $pod -n ${{ env.DEPLOYMENT_NAME }}
            
            echo "--- Pod 環境變數檢查: $pod ---"
            if kubectl exec $pod -n ${{ env.DEPLOYMENT_NAME }} -- printenv | grep -E "(JWT_SECRET|DB_PASS|DB_USER)" 2>/dev/null; then
              echo "✅ 找到所需環境變數"
            else
              echo "❌ Pod 中缺少所需環境變數"
              echo "所有環境變數："
              kubectl exec $pod -n ${{ env.DEPLOYMENT_NAME }} -- printenv 2>/dev/null | head -10 || echo "無法執行環境變數檢查"
            fi
            
            echo "--- Pod 日誌: $pod ---"
            kubectl logs $pod -n ${{ env.DEPLOYMENT_NAME }} || echo "無法獲取日誌"
          done
          
          echo "=== 檢查 ServiceAccount ==="
          kubectl get serviceaccount -n ${{ env.DEPLOYMENT_NAME }}
          kubectl describe serviceaccount ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }} || echo "ServiceAccount 不存在"
          
          echo "=== 檢查 Secrets ==="
          kubectl get secrets -n ${{ env.DEPLOYMENT_NAME }}
          
          echo "=== 檢查節點資源 ==="
          kubectl describe nodes | grep -E "(Name:|cpu|memory|Allocated|allocatable)" || echo "無法獲取節點資源資訊"

      - name: 驗證部署狀態
        run: |
          echo "驗證部署狀態..."
          kubectl get pods -n ${{ env.DEPLOYMENT_NAME }}
          kubectl get services -n ${{ env.DEPLOYMENT_NAME }}
          kubectl get ingress -n ${{ env.DEPLOYMENT_NAME }} || echo "無 Ingress 資源"
          
          # 檢查 Pod 就緒狀態
          echo "等待 Pod 就緒..."
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=deno-web-app \
            -n ${{ env.DEPLOYMENT_NAME }} --timeout=300s || echo "某些 Pod 可能還未就緒"
          
          echo "✅ 部署完成"

      - name: 故障排除資訊
        if: failure()
        run: |
          echo "🚨 部署失敗，收集診斷資訊..."
          
          echo "=== Helm Release 狀態 ==="
          helm list -n ${{ env.DEPLOYMENT_NAME }} -a || echo "無法獲取 Helm release 列表"
          helm status ${{ env.DEPLOYMENT_NAME }} -n ${{ env.DEPLOYMENT_NAME }} || echo "無法獲取 release 狀態"
          
          echo "=== Kubernetes 事件 ==="
          kubectl get events -n ${{ env.DEPLOYMENT_NAME }} --sort-by='.lastTimestamp' --field-selector type!=Normal || echo "無法獲取事件"
          
          echo "=== Pod 詳細資訊 ==="
          kubectl describe pods -n ${{ env.DEPLOYMENT_NAME }} || echo "無法獲取 Pod 描述"
          
          echo "=== Pod 日誌 ==="
          for pod in $(kubectl get pods -n ${{ env.DEPLOYMENT_NAME }} -o name); do
            echo "--- $pod 日誌 ---"
            kubectl logs $pod -n ${{ env.DEPLOYMENT_NAME }} --tail=50 || echo "無法獲取日誌"
          done